@page "/workspace/{WorkspaceId}"
@using CFDTrollo.Components
@using CFDTrollo.Models
@using CFDTrollo.Services
@inject WorkspaceService WorkspaceService
@inject NavigationManager Navigation

<PageTitle>@(workspace?.Name ?? "Workspace")</PageTitle>

@if (workspace == null)
{
    <div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Loading workspace...</p>
        </div>
    </div>
}
else
{
    <div class="min-h-screen" style="background-color: @workspace.Color; color: rgb(0, 0, 0);">
        <!-- Header -->
        <div class="backdrop-blur-sm p-4 shadow-md border-b" style="color: white;">
            <div class="container mx-auto flex items-center justify-between">
                <div class="flex items-center gap-4">
                    <a @onclick="NavigateToHome" class="flex items-center gap-2 text-white hover:text-white/80 transition-colors">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m12 19-7-7 7-7"></path>
                            <path d="M19 12H5"></path>
                        </svg>
                        <span>Back to Workspaces</span>
                    </a>
                    <div class="h-6 w-px bg-white/30"></div>
                    <div class="flex items-center gap-3">
                        <div class="w-8 h-8 rounded-lg flex items-center justify-center" style="background-color: @workspace.Color">
                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                            </svg>
                        </div>
                        <div>
                            <h1 class="text-xl font-semibold">@workspace.Name</h1>
                            <p class="text-sm opacity-80">@workspace.Description</p>
                        </div>
                    </div>
                </div>
                <button class="p-2 hover:bg-white/10 rounded-lg transition-colors" title="Workspace Settings">
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path>
                        <circle cx="12" cy="12" r="3"></circle>
                    </svg>
                </button>
            </div>
        </div>
        
        <!-- Board Content -->
        <div class="min-h-screen bg-board">
            <Board WorkspaceId="@WorkspaceId" OnCardCountChanged="@UpdateCardCount" />
        </div>
    </div>
}

<!-- Workspace Settings Modal -->
@if (showSettingsModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 modal-backdrop flex items-center justify-center z-50" @onclick="HideWorkspaceSettings">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4" @onclick:stopPropagation="true">
            <div class="p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Workspace Settings</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Workspace Name</label>
                        <input @bind="workspace.Name" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                        <textarea @bind="workspace.Description" 
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                  rows="3"></textarea>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Color</label>
                        <div class="flex gap-2">
                            @foreach (var color in workspaceColors)
                            {
                                <button @onclick="() => workspace.Color = color" 
                                        class="w-8 h-8 rounded-full border-2 @(workspace.Color == color ? "border-gray-400" : "border-gray-200")"
                                        style="background-color: @color"></button>
                            }
                        </div>
                    </div>
                </div>
                
                <div class="flex justify-between mt-6">
                    <button @onclick="DeleteWorkspace" 
                            class="px-4 py-2 text-red-600 hover:text-red-800 font-medium">
                        Delete Workspace
                    </button>
                    <div class="flex gap-3">
                        <button @onclick="HideWorkspaceSettings" 
                                class="px-4 py-2 text-gray-600 hover:text-gray-800 font-medium">
                            Cancel
                        </button>
                        <button @onclick="SaveWorkspaceSettings" 
                                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors duration-200">
                            Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string WorkspaceId { get; set; } = "";
    
    private CFDTrollo.Models.Workspace? workspace;
    private bool showSettingsModal = false;
    
    private readonly string[] workspaceColors = {
        "#3B82F6", "#10B981", "#8B5CF6", "#EF4444", "#F59E0B", "#6366F1"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkspace();
    }

    private async Task LoadWorkspace()
    {
        workspace = await WorkspaceService.GetWorkspaceAsync(WorkspaceId);
        if (workspace == null)
        {
            // Workspace not found, redirect to home
            Navigation.NavigateTo("/");
        }
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    private async Task UpdateCardCount(int cardCount)
    {
        if (workspace != null)
        {
            workspace.CardCount = cardCount;
            await WorkspaceService.UpdateWorkspaceAsync(workspace);
        }
    }

    private void ShowWorkspaceSettings()
    {
        showSettingsModal = true;
    }

    private void HideWorkspaceSettings()
    {
        showSettingsModal = false;
    }

    private async Task SaveWorkspaceSettings()
    {
        if (workspace != null)
        {
            await WorkspaceService.UpdateWorkspaceAsync(workspace);
            HideWorkspaceSettings();
        }
    }

    private async Task DeleteWorkspace()
    {
        if (workspace != null)
        {
            await WorkspaceService.DeleteWorkspaceAsync(workspace.Id);
            Navigation.NavigateTo("/");
        }
    }
}
