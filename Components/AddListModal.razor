@using CFDTrollo.Models

@if (IsOpen)
{
    <BaseModal OnClose="OnClose">
        <div class="p-6">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-semibold text-foreground">Add New List</h2>
                <button @onclick="OnClose"
                        class="p-2 hover:bg-muted rounded-lg transition-colors">
                    <svg class="w-5 h-5 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-foreground mb-2">List Title</label>
                    <input type="text"
                           @bind="listTitle"
                           @onkeydown="@(async e => { if (e.Key == "Enter") await HandleAddList(); })"
                           placeholder="Enter list title..."
                           class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-all hover:border-primary/50"
                           @ref="titleInputRef"
                           autofocus />
                </div>

                <div>
                    <label class="block text-sm font-medium text-foreground mb-2">Description (Optional)</label>
                    <textarea @bind="listDescription"
                              placeholder="Enter list description..."
                              class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground placeholder:text-muted-foreground resize-none focus:outline-none focus:ring-2 focus:ring-primary min-h-[80px] transition-all hover:border-primary/50"
                              rows="2"></textarea>
                </div>

                <div>
                    <label class="block text-sm font-medium text-foreground mb-2">List Color</label>
                    <div class="flex gap-2 flex-wrap">
                        @foreach (var color in listColors)
                        {
                            <button @onclick="@(() => selectedColor = color.Value)"
                                    class="w-8 h-8 rounded-lg border-2 transition-all @(selectedColor == color.Value ? "border-primary ring-2 ring-primary/20" : "border-border hover:border-muted") @color.Value"
                                    title="@color.Name"></button>
                        }
                    </div>
                </div>
            </div>

            <div class="flex justify-end gap-3 mt-6">
                <button @onclick="OnClose"
                        class="px-4 py-2 text-muted-foreground hover:text-foreground transition-colors">
                    Cancel
                </button>
                <button @onclick="HandleAddList"
                        disabled="@(string.IsNullOrWhiteSpace(listTitle))"
                        class="px-6 py-2 bg-primary text-primary-foreground rounded-lg hover:opacity-90 transition-all font-medium shadow-sm hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed">
                    Add List
                </button>
            </div>
        </div>
    </BaseModal>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<List> OnAddList { get; set; }

    private string listTitle = string.Empty;
    private string listDescription = string.Empty;
    private string selectedColor = "bg-blue-500";
    private ElementReference titleInputRef;

    private readonly List<(string Name, string Value)> listColors = new()
    {
        ("Blue", "bg-blue-500"),
        ("Green", "bg-green-500"),
        ("Purple", "bg-purple-500"),
        ("Red", "bg-red-500"),
        ("Yellow", "bg-yellow-500"),
        ("Orange", "bg-orange-500"),
        ("Pink", "bg-pink-500"),
        ("Indigo", "bg-indigo-500")
    };

    protected override void OnParametersSet()
    {
        if (IsOpen)
        {
            // Reset form when modal opens
            listTitle = string.Empty;
            listDescription = string.Empty;
            selectedColor = "bg-blue-500";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsOpen && titleInputRef.Context != null)
        {
            await titleInputRef.FocusAsync();
        }
    }

    private async Task HandleAddList()
    {
        if (string.IsNullOrWhiteSpace(listTitle))
            return;

        var newList = new List
        {
            Id = Guid.NewGuid().ToString(),
            Title = listTitle.Trim(),
            Description = listDescription?.Trim() ?? string.Empty,
            Color = selectedColor,
            Cards = new List<Card>()
        };

        await OnAddList.InvokeAsync(newList);
        await OnClose.InvokeAsync();
    }
}
