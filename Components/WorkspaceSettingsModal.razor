@using CFDTrollo.Models

@if (IsOpen)
{
    <BaseModal OnClose="OnClose">
        <div class="p-6">
            <div class="flex items-center justify-between mb-6">
                <h2 class="text-2xl font-semibold text-foreground">Workspace Settings</h2>
                <button @onclick="OnClose"
                        class="p-2 hover:bg-muted rounded-lg transition-colors">
                    <svg class="w-6 h-6 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <div class="space-y-6">
                <!-- Workspace Information -->
                <div class="space-y-4">
                    <h3 class="text-lg font-semibold text-foreground">Workspace Information</h3>
                    
                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Workspace Name</label>
                        <input type="text"
                               @bind="workspaceName"
                               class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-all hover:border-primary/50" />
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Description</label>
                        <textarea @bind="workspaceDescription"
                                  placeholder="Enter workspace description..."
                                  class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground placeholder:text-muted-foreground resize-none focus:outline-none focus:ring-2 focus:ring-primary min-h-[100px] transition-all hover:border-primary/50"
                                  rows="3"></textarea>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-foreground mb-2">Workspace Color</label>
                        <div class="flex gap-3 flex-wrap">
                            @foreach (var color in workspaceColors)
                            {
                                <button @onclick="@(() => selectedColor = color.Value)"
                                        class="w-12 h-12 rounded-lg border-2 transition-all @(selectedColor == color.Value ? "border-primary ring-2 ring-primary/20" : "border-border hover:border-muted") @color.Value"
                                        title="@color.Name"></button>
                            }
                        </div>
                    </div>
                </div>

                <!-- Workspace Actions -->
                <div class="space-y-4">
                    <h3 class="text-lg font-semibold text-foreground">Workspace Actions</h3>
                    
                    <div class="space-y-3">
                        <button @onclick="ExportWorkspace"
                                class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground hover:bg-muted transition-all text-left flex items-center gap-3">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            Export Workspace Data
                        </button>

                        <button @onclick="ImportWorkspace"
                                class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground hover:bg-muted transition-all text-left flex items-center gap-3">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                            </svg>
                            Import Workspace Data
                        </button>

                        <button @onclick="ClearWorkspace"
                                class="w-full px-4 py-3 border border-destructive rounded-lg bg-background text-destructive hover:bg-destructive/10 transition-all text-left flex items-center gap-3">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Clear All Data
                        </button>
                    </div>
                </div>

                <!-- Danger Zone -->
                <div class="space-y-4 border-t border-border pt-6">
                    <h3 class="text-lg font-semibold text-destructive">Danger Zone</h3>
                    
                    <div class="p-4 border border-destructive/20 rounded-lg bg-destructive/5">
                        <p class="text-sm text-muted-foreground mb-3">
                            Once you delete a workspace, there is no going back. Please be certain.
                        </p>
                        <button @onclick="DeleteWorkspace"
                                class="px-4 py-2 bg-destructive text-destructive-foreground rounded-lg hover:opacity-90 transition-all text-sm font-medium">
                            Delete Workspace
                        </button>
                    </div>
                </div>
            </div>

            <div class="flex justify-end gap-3 mt-8">
                <button @onclick="OnClose"
                        class="px-4 py-2 text-muted-foreground hover:text-foreground transition-colors">
                    Cancel
                </button>
                <button @onclick="SaveSettings"
                        class="px-6 py-2 bg-primary text-primary-foreground rounded-lg hover:opacity-90 transition-all font-medium shadow-sm hover:shadow-md">
                    Save Changes
                </button>
            </div>
        </div>
    </BaseModal>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Workspace> OnSave { get; set; }
    [Parameter] public EventCallback OnExport { get; set; }
    [Parameter] public EventCallback OnImport { get; set; }
    [Parameter] public EventCallback OnClear { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public Workspace Workspace { get; set; } = new();

    private string workspaceName = string.Empty;
    private string workspaceDescription = string.Empty;
    private string selectedColor = "bg-blue-500";

    private readonly List<(string Name, string Value)> workspaceColors = new()
    {
        ("Blue", "bg-blue-500"),
        ("Green", "bg-green-500"),
        ("Purple", "bg-purple-500"),
        ("Red", "bg-red-500"),
        ("Yellow", "bg-yellow-500"),
        ("Orange", "bg-orange-500"),
        ("Pink", "bg-pink-500"),
        ("Indigo", "bg-indigo-500"),
        ("Teal", "bg-teal-500"),
        ("Cyan", "bg-cyan-500")
    };

    protected override void OnParametersSet()
    {
        if (IsOpen && Workspace != null)
        {
            workspaceName = Workspace.Name ?? string.Empty;
            workspaceDescription = Workspace.Description ?? string.Empty;
            selectedColor = Workspace.Color ?? "bg-blue-500";
        }
    }

    private async Task SaveSettings()
    {
        var updatedWorkspace = new Workspace
        {
            Id = Workspace.Id,
            Name = workspaceName.Trim(),
            Description = workspaceDescription?.Trim() ?? string.Empty,
            Color = selectedColor,
            Lists = Workspace.Lists
        };

        await OnSave.InvokeAsync(updatedWorkspace);
        await OnClose.InvokeAsync();
    }

    private async Task ExportWorkspace()
    {
        await OnExport.InvokeAsync();
    }

    private async Task ImportWorkspace()
    {
        await OnImport.InvokeAsync();
    }

    private async Task ClearWorkspace()
    {
        await OnClear.InvokeAsync();
        await OnClose.InvokeAsync();
    }

    private async Task DeleteWorkspace()
    {
        await OnDelete.InvokeAsync();
        await OnClose.InvokeAsync();
    }
}
