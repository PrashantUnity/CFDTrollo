@using CFDTrollo.Models
@using CFDTrollo.Components.UI

@if (IsOpen)
{
    <BaseModal OnClose="OnClose">
        <div class="p-6">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-xl font-semibold text-foreground">Add New Card</h2>
                <button @onclick="OnClose"
                        class="p-2 hover:bg-muted rounded-lg transition-colors">
                    <svg class="w-5 h-5 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-foreground mb-2">Card Title</label>
                    <input type="text"
                           @bind="cardTitle"
                           @onkeydown="@(async e => { if (e.Key == "Enter") await HandleAddCard(); })"
                           placeholder="Enter card title..."
                           class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-all hover:border-primary/50"
                           @ref="titleInputRef"
                           autofocus />
                </div>

                <div>
                    <label class="block text-sm font-medium text-foreground mb-2">Description (Optional)</label>
                    <textarea @bind="cardDescription"
                              placeholder="Enter card description..."
                              class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground placeholder:text-muted-foreground resize-none focus:outline-none focus:ring-2 focus:ring-primary min-h-[100px] transition-all hover:border-primary/50"
                              rows="3"></textarea>
                </div>

                <div>
                    <label class="block text-sm font-medium text-foreground mb-2">Due Date (Optional)</label>
                    <input type="date" 
                           value="@cardDueDateString"
                           @onchange="@((ChangeEventArgs e) => cardDueDateString = e.Value?.ToString() ?? string.Empty)"
                           class="w-full px-4 py-3 border border-border rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary transition-all hover:border-primary/50" />
                </div>
            </div>

            <div class="flex justify-end gap-3 mt-6">
                <button @onclick="OnClose"
                        class="px-4 py-2 text-muted-foreground hover:text-foreground transition-colors">
                    Cancel
                </button>
                <button @onclick="HandleAddCard"
                        disabled="@(string.IsNullOrWhiteSpace(cardTitle))"
                        class="px-6 py-2 bg-primary text-primary-foreground rounded-lg hover:opacity-90 transition-all font-medium shadow-sm hover:shadow-md disabled:opacity-50 disabled:cursor-not-allowed">
                    Add Card
                </button>
            </div>
        </div>
    </BaseModal>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Card> OnAddCard { get; set; }
    [Parameter] public string ListName { get; set; } = "";

    private string cardTitle = string.Empty;
    private string cardDescription = string.Empty;
    private string cardDueDateString = string.Empty;
    private ElementReference titleInputRef;

    protected override void OnParametersSet()
    {
        if (IsOpen)
        {
            // Reset form when modal opens
            cardTitle = string.Empty;
            cardDescription = string.Empty;
            cardDueDateString = string.Empty;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsOpen && titleInputRef.Context != null)
        {
            await titleInputRef.FocusAsync();
        }
    }

    private async Task HandleAddCard()
    {
        if (string.IsNullOrWhiteSpace(cardTitle))
            return;

        var newCard = new Card
        {
            Id = Guid.NewGuid().ToString(),
            Title = cardTitle.Trim(),
            Description = cardDescription?.Trim() ?? string.Empty,
            DueDate = string.IsNullOrEmpty(cardDueDateString) ? null : cardDueDateString,
            IsComplete = false,
            Labels = new List<Label>(),
            BackgroundColor = null,
            ImageUrl = null
        };

        await OnAddCard.InvokeAsync(newCard);
        await OnClose.InvokeAsync();
    }
}
