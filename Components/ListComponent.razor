@using CFDTrollo.Models
@using CFDTrollo.Services
@inject DragDropService DragDropService
@inject IJSRuntime JSRuntime

    <div class="list-component bg-list rounded-lg p-3 w-72 flex-shrink-0 max-h-[calc(100vh-8rem)] flex flex-col border border-border shadow-card transition-all group" 
     data-list-id="@List.Id"
     @ref="listElement">
    <div class="flex items-center justify-between mb-2">
        @if (isEditingTitle)
        {
            <input @bind="editTitle" 
                   @onkeypress="HandleKeyPress"
                   @onblur="SaveTitle"
                   class="font-semibold text-foreground px-2 py-1 flex-1 bg-transparent border border-blue-500 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                   @ref="titleInput" />
        }
        else
        {
        <div class="font-semibold text-foreground px-2 py-1 select-none flex-1 list-drag-handle">
            @List.Title
        </div>
        }
        <div class="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
            <button @onclick="HandleEditList" 
                    class="p-1 hover:bg-gray-200 rounded text-gray-600 hover:text-gray-800 transition-colors"
                    title="Edit List">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
            </button>
            <button @onclick="HandleDeleteList" 
                    class="p-1 hover:bg-red-100 rounded text-gray-600 hover:text-red-600 transition-colors"
                    title="Delete List">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
            </button>
        </div>
    </div>
    
    <div id="@($"list-{List.Id}")" 
         class="flex-1 min-h-[100px] max-h-[calc(100vh-12rem)] overflow-y-auto rounded-md transition-colors bg-transparent"
         @ref="cardDropZone"
         data-list-id="@List.Id">
        @foreach (var (card, index) in List.Cards.Select((card, index) => (card, index)))
        {
            <CardComponent Card="@card" 
                          Index="@index" 
                          ListTitle="@List.Title" 
                          OnUpdateCard="@OnUpdateCard"
                          OnDeleteCard="@OnDeleteCard" />
        }
    </div>
    
    <AddCardComponent OnAddCard="@OnAddCard" />
</div>

@code {
    [Parameter] public List List { get; set; } = new();
    [Parameter] public int Index { get; set; }
    [Parameter] public EventCallback<string> OnAddCard { get; set; }
    [Parameter] public EventCallback<Card> OnUpdateCard { get; set; }
    [Parameter] public EventCallback OnDeleteList { get; set; }
    [Parameter] public EventCallback<string> OnDeleteCard { get; set; }

    private ElementReference listElement;
    private ElementReference cardDropZone;
    private ElementReference titleInput;
    private bool isEditingTitle = false;
    private string editTitle = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Wait for DOM to be fully rendered
            await Task.Delay(50);
            
            try
            {
                // Enable card dragging for this list
                await DragDropService.EnableCardDraggingAsync(cardDropZone, List.Id);
                Console.WriteLine($"✅ Card dragging enabled for list: {List.Title}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Error enabling card dragging for {List.Title}: {ex.Message}");
            }
        }
    }

    private void HandleEditList()
    {
        isEditingTitle = true;
        editTitle = List.Title;
        StateHasChanged();
    }

    private async Task HandleDeleteList()
    {
        await OnDeleteList.InvokeAsync();
    }

    private async Task HandleDeleteCard(string cardId)
    {
        await OnDeleteCard.InvokeAsync(cardId);
    }

    private async Task SaveTitle()
    {
        if (!string.IsNullOrWhiteSpace(editTitle) && editTitle != List.Title)
        {
            List.Title = editTitle.Trim();
            await OnUpdateCard.InvokeAsync(new Card { Id = List.Id, Title = List.Title });
        }
        isEditingTitle = false;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        isEditingTitle = false;
        editTitle = List.Title;
        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveTitle();
        }
        else if (e.Key == "Escape")
        {
            CancelEdit();
        }
    }
}
